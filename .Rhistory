setNames(paste0("PC", 1:ncomp))
## Max Positive Loading WT procedure
max_rotatedLoadings <- rotatedLoadings %>%
as_tibble() %>%
setNames(paste0("PC", 1:ncomp))
max_rotatedLoadings$WT_max <- names(max_rotatedLoadings)[max.col(max_rotatedLoadings,
ties.method = "first")]
WT_max <- suppressWarnings(as.numeric(gsub(substr(max_rotatedLoadings$WT_max, 1, 2), "",
max_rotatedLoadings$WT_max)))  # convertimos a numerico
max_rotatedLoadings$WT_max <- WT_max
## Negative/postive WT procedure
abs_rotatedLoadings <- abs(rotatedLoadings) %>%
as_tibble() %>%
setNames(paste0("PC", 1:ncomp))
abs_rotatedLoadings$WT_abs <- names(abs_rotatedLoadings)[max.col(abs_rotatedLoadings,
ties.method = "first")]
WT_abs <- suppressWarnings(as.numeric(gsub(substr(abs_rotatedLoadings$WT_abs, 1, 2), "",
abs_rotatedLoadings$WT_abs)))  # convertimos a numerico
abs_rotatedLoadings$WT_abs <- WT_abs
WT_posneg <- rotatedLoadings %>%
as_tibble() %>%
setNames(1:ncomp) %>%
cbind.data.frame(time = unique(x$time),
WT_abs =abs_rotatedLoadings$WT_abs,
WT_max = max_rotatedLoadings$WT_max) %>%
as_tibble()
# creant serie unica maxims loadings (+ o -)
WT_posneg_g <- gather(WT_posneg,
key = "PCs",
value = "loadings",
1:ncomp) %>%
mutate(PCs = as.numeric(.data$PCs)) %>%
mutate(loadings = ifelse(.data$WT_abs == .data$PCs, loadings, NA)) %>%
filter(!is.na(.data$loadings)) %>%
arrange(.data$time) %>%
mutate(symbol = ifelse(loadings >= 0, "+", "-"),
WT_pn = paste0(.data$PCs, .data$symbol))
## Final classifications
clas_abs <- select(WT_posneg_g, .data$time, .data$WT_abs) %>% rename(WT = .data$WT_abs)
clas_pn <- select(WT_posneg_g, .data$time, .data$WT_pn) %>% rename(WT = .data$WT_pn)
clas_max <- select(WT_posneg_g, .data$time, .data$WT_max) %>% rename(WT = .data$WT_max)
# absolute classification gridding construction
df_tmode_abs <- x %>%
inner_join(clas_abs, by = "time")
df_tmode_abs_panels <- df_tmode_abs %>%
group_by(.data$lon, .data$lat, .data$WT, .data$var) %>%
mutate(mean_WT_value = mean(.data$value),
mean_WT_anom_value = mean(.data$anom_value),
cv_WT_value = (sd(.data$value) / mean(.data$value)) * 100) %>%
select(-.data$value, -.data$anom_value) %>%
ungroup() %>%
distinct(.data$lon, .data$lat, .data$WT, .data$var, .keep_all = T)
# Positive/negative classification gridding construction
df_tmode_pn <- x %>%
inner_join(clas_pn, by = "time")
df_tmode_pn_panels <- df_tmode_pn %>%
group_by(.data$lon, .data$lat, .data$WT, .data$var) %>%
mutate(mean_WT_value = mean(.data$value),
mean_WT_anom_value = mean(.data$anom_value),
cv_WT_value = (sd(.data$value) / mean(.data$value)) * 100) %>%
select(-.data$value, -.data$anom_value) %>%
ungroup() %>%
distinct(.data$lon, .data$lat, .data$WT, .data$var, .keep_all = T)
return(list(clas_abs = clas_abs,
clas_pn = clas_pn,
grid_clas_abs = df_tmode_abs_panels,
grid_clas_pn = df_tmode_pn_panels))
} else {
stop("please, choose one between S-mode and T-mode matrix modes")
}
}
synoptclas2(vars_torrential,4,matrix_mode = "T-mode")
devtools::check()
roxygen2::roxygenise()
setwd("C:/Users/gc/Desktop/synoptReg")
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::check()
setwd("C:/Users/gc/Desktop/synoptReg")
devtools::check()
setwd("C:/Users/gc/Desktop/DOCTORAT/synoptReg/CRAN")
devtools::check()
devtools::build()
remove.packages("synoptReg")
remotes::install_github("lemuscanovas/synoptReg")
library(synoptRef)
library(synoptReg)
lamb_clas()
?lamb_clas
points <- get_lamb_points(x = 5,y = 40)
points
lamb_clas(points = points, mslp = mslp)
a <- lamb_clas(points = points, mslp = mslp)
table(a$clas$WT)
a <- lamb_clas(points = points, mslp = mslp, U = T)
a
a$grid_clas
a <- lamb_clas(points = points, mslp = mslp, U = T)
table
table(a$clas$WT)
a <- lamb_clas(points = points, mslp = mslp, U = T)
table(a$clas$WT)
a <- lamb_clas(points = points, mslp = mslp)
table(a$clas$WT)
a - download_ncep()
a <- download_ncep()
a <- lamb_clas(points = points, mslp = a)
a <- lamb_clas(points = points, mslp = a)
a
b <- lamb_clas(points = points, mslp = a)
a
b <- download_ncep(lon_range = c(-10,30))
a <- lamb_clas(points = points, mslp = b)
table(b$clas$WT)
table(a$clas$WT)
a <- lamb_clas(points = points, mslp = b,U = T)
table(a$clas$WT)
remove.packages("synoptReg")
remotes::install_github("lemuscanovas/synoptReg")
library(synoptReg)
lamb_clas
a <- lamb_clas(points = points, mslp = b,U = T)
a <- lamb_clas(points = points, mslp = mslp,U = T)
a <- lamb_clas(points = points, mslp = msl,U = T)
points <- get_lamb_points(x = 5,y = 40)
a <- lamb_clas(points = points, mslp = mslp,U = T)
table(a$clas$WT)
a <- lamb_clas(points = points, mslp = mslp,U = F)
table(a$clas$WT)
remove.packages("synoptReg")
remotes::install_github("lemuscanovas/synoptReg")
library(synoptReg)
mslp <- download_ncep(lon_range = c(-10,30),year_range = c(1980,2010),hour = 06)
?lamb_clas
points <- get_lamb_points(x = 5,y = 40)
lamb_clas(points = points, mslp = mslp)
cl <-lamb_clas(points = points, mslp = mslp)
table(cl$clas$WT)
cl <-lamb_clas(points = points, mslp = mslp,U = T)
table(cl$clas$WT)
remove.packages("synoptReg")
remotes::install_github("lemuscanovas/synoptReg")
library(synoptReg)
?lamb_clas
points <- get_lamb_points(x = 5,y = 40)
data(mslp)
lamb_clas(points = points, mslp = mslp)
table
cl <- lamb_clas(points = points, mslp = mslp)
table
table(cl)
table(cl$clas$WT)
cl <- lamb_clas(points = points, mslp = mslp,U = T)
table(cl$clas$WT)
lamb_clas2 <- function(points,mslp){
var <- vars_lamb(points,mslp,U)
WT <- apply(var,1,lamb_wt)
# clas
time <- unique(mslp$time)
clas <- tibble(time,WT)
# grid clas
grid_clas <- inner_join(clas, mslp, by = "time") %>%
group_by(.data$lon,.data$lat,.data$WT) %>%
summarise(.data$value) %>% ungroup() %>%
distinct(.data$lon,.data$lat,.data$WT,.keep_all = T)
return(list(clas = clas,
grid_clas = grid_clas))
}
vars_lamb <- function(points, mslp) {
pp <- inner_join(points, mslp, by = c("lon","lat")) %>%
select(c(.data$label,.data$time,.data$value)) %>%
pivot_wider(names_from = .data$label,values_from = .data$value)
x<- pp
SF <- 1.74*(0.25*(x$P5+2*x$P9+x$P13)-0.25*(x$P4+2*x$P8+x$P12))
WF <- (0.5*(x$P12+x$P13)-0.5*(x$P4+x$P5))
D <- atan(WF/SF)*(360/(2*pi))
ZS <- 1.52*(0.25*(x$P6+2*x$P10+x$P14)-0.25*(x$P5+2*x$P9+x$P3)-0.25*(x$P4+2*x$P8+x$P12)+0.25*(x$P3+2*x$P7+x$P11))
ZW <- 1.07*(0.5*(x$P15+x$P16)-0.5*(x$P8+x$P9)-0.95*(0.5*(x$P8+x$P9)-0.5*(x$P1+x$P2)))
FF <- (SF^2+WF^2)^(1/2)
Z <- ZS+ZW
var <- data.frame(SF,WF,D,ZS,ZW,FF,Z)
}
lamb_wt <- function(x){
dir <- seq(22.5,360,45)
lev_dir <- levels(cut(seq(0,360,1),seq(22.5,360,45)))
if(abs(x["Z"])<x["FF"]){
out <- ifelse(x["WF"]>0 & x["SF"]>0, x["D"]+180,ifelse(x["WF"]>0 & x["SF"]<0,x["D"]+360,ifelse(x["WF"]<0 & x["SF"]<0,x["D"],x["D"]+180)))
out <- recode(as.character(cut(out,dir)),"(22.5,67.5]"="NE","(67.5,112]"="E","(112,158]"="SE",
"(158,202]"="S","(202,248]"="SW","(248,292]"="W","(292,338]"="NW",.missing = "N")
}
if(abs(x["Z"])>2*x["FF"]){
if(x["Z"]>0){
out <- "C"
}else{
out <- "A"
}
}
if(x["FF"]<abs(x["Z"])&abs(x["Z"])<2*x["FF"]){
if(x["Z"]>0){
out_p1 <- "C"
}else{
out_p1 <- "A"
}
out_p2 <- unlist(ifelse(x["WF"]>0 & x["SF"]>0, x["D"]+180,ifelse(x["WF"]>0 & x["SF"]<0,x["D"]+360,ifelse(x["WF"]<0 & x["SF"]<0,x["D"],x["D"]+180))))
out_p2 <- recode(as.character(cut(out_p2,dir)),"(22.5,67.5]"="NE","(67.5,112]"="E","(112,158]"="SE",
"(158,202]"="S","(202,248]"="SW","(248,292]"="W","(292,338]"="NW",.missing = "N")
out <- as.character(paste(out_p1,out_p2,sep=""))
}
# Only works when U = TRUE.
if(abs(x["Z"])<6 & x["FF"]<6) out <- "U"
ifelse(!is.na(out),return(out),return(NA))
}
cl <- lamb_clas2(points = points, mslp = mslp,U = T)
cl <- lamb_clas2(points = points, mslp = mslp)
cl <- lamb_clas2(points = points, mslp = mslp)
lamb_clas2 <- function(points,mslp){
var <- vars_lamb(points,mslp)
WT <- apply(var,1,lamb_wt)
# clas
time <- unique(mslp$time)
clas <- tibble(time,WT)
# grid clas
grid_clas <- inner_join(clas, mslp, by = "time") %>%
group_by(.data$lon,.data$lat,.data$WT) %>%
summarise(.data$value) %>% ungroup() %>%
distinct(.data$lon,.data$lat,.data$WT,.keep_all = T)
return(list(clas = clas,
grid_clas = grid_clas))
}
vars_lamb <- function(points, mslp) {
pp <- inner_join(points, mslp, by = c("lon","lat")) %>%
select(c(.data$label,.data$time,.data$value)) %>%
pivot_wider(names_from = .data$label,values_from = .data$value)
x<- pp
SF <- 1.74*(0.25*(x$P5+2*x$P9+x$P13)-0.25*(x$P4+2*x$P8+x$P12))
WF <- (0.5*(x$P12+x$P13)-0.5*(x$P4+x$P5))
D <- atan(WF/SF)*(360/(2*pi))
ZS <- 1.52*(0.25*(x$P6+2*x$P10+x$P14)-0.25*(x$P5+2*x$P9+x$P3)-0.25*(x$P4+2*x$P8+x$P12)+0.25*(x$P3+2*x$P7+x$P11))
ZW <- 1.07*(0.5*(x$P15+x$P16)-0.5*(x$P8+x$P9)-0.95*(0.5*(x$P8+x$P9)-0.5*(x$P1+x$P2)))
FF <- (SF^2+WF^2)^(1/2)
Z <- ZS+ZW
var <- data.frame(SF,WF,D,ZS,ZW,FF,Z)
}
lamb_wt <- function(x){
dir <- seq(22.5,360,45)
lev_dir <- levels(cut(seq(0,360,1),seq(22.5,360,45)))
if(abs(x["Z"])<x["FF"]){
out <- ifelse(x["WF"]>0 & x["SF"]>0, x["D"]+180,ifelse(x["WF"]>0 & x["SF"]<0,x["D"]+360,ifelse(x["WF"]<0 & x["SF"]<0,x["D"],x["D"]+180)))
out <- recode(as.character(cut(out,dir)),"(22.5,67.5]"="NE","(67.5,112]"="E","(112,158]"="SE",
"(158,202]"="S","(202,248]"="SW","(248,292]"="W","(292,338]"="NW",.missing = "N")
}
if(abs(x["Z"])>2*x["FF"]){
if(x["Z"]>0){
out <- "C"
}else{
out <- "A"
}
}
if(x["FF"]<abs(x["Z"])&abs(x["Z"])<2*x["FF"]){
if(x["Z"]>0){
out_p1 <- "C"
}else{
out_p1 <- "A"
}
out_p2 <- unlist(ifelse(x["WF"]>0 & x["SF"]>0, x["D"]+180,ifelse(x["WF"]>0 & x["SF"]<0,x["D"]+360,ifelse(x["WF"]<0 & x["SF"]<0,x["D"],x["D"]+180))))
out_p2 <- recode(as.character(cut(out_p2,dir)),"(22.5,67.5]"="NE","(67.5,112]"="E","(112,158]"="SE",
"(158,202]"="S","(202,248]"="SW","(248,292]"="W","(292,338]"="NW",.missing = "N")
out <- as.character(paste(out_p1,out_p2,sep=""))
}
# Only works when U = TRUE.
if(abs(x["Z"])<6 & x["FF"]<6) out <- "U"
ifelse(!is.na(out),return(out),return(NA))
}
cl <- lamb_clas2(points = points, mslp = mslp)
library(tidyverse)
cl <- lamb_clas2(points = points, mslp = mslp)
cl
table(cl$clas$)
table(cl$clas$WT)
lamb_wt <- function(x,U = F){
dir <- seq(22.5,360,45)
lev_dir <- levels(cut(seq(0,360,1),seq(22.5,360,45)))
if(abs(x["Z"])<x["FF"]){
out <- ifelse(x["WF"]>0 & x["SF"]>0, x["D"]+180,ifelse(x["WF"]>0 & x["SF"]<0,x["D"]+360,ifelse(x["WF"]<0 & x["SF"]<0,x["D"],x["D"]+180)))
out <- recode(as.character(cut(out,dir)),"(22.5,67.5]"="NE","(67.5,112]"="E","(112,158]"="SE",
"(158,202]"="S","(202,248]"="SW","(248,292]"="W","(292,338]"="NW",.missing = "N")
}
if(abs(x["Z"])>2*x["FF"]){
if(x["Z"]>0){
out <- "C"
}else{
out <- "A"
}
}
if(x["FF"]<abs(x["Z"])&abs(x["Z"])<2*x["FF"]){
if(x["Z"]>0){
out_p1 <- "C"
}else{
out_p1 <- "A"
}
out_p2 <- unlist(ifelse(x["WF"]>0 & x["SF"]>0, x["D"]+180,ifelse(x["WF"]>0 & x["SF"]<0,x["D"]+360,ifelse(x["WF"]<0 & x["SF"]<0,x["D"],x["D"]+180))))
out_p2 <- recode(as.character(cut(out_p2,dir)),"(22.5,67.5]"="NE","(67.5,112]"="E","(112,158]"="SE",
"(158,202]"="S","(202,248]"="SW","(248,292]"="W","(292,338]"="NW",.missing = "N")
out <- as.character(paste(out_p1,out_p2,sep=""))
}
# Only works when U = TRUE.
if(U!= FALSE & abs(x["Z"])<500 & x["FF"]<500) out <- "U"
ifelse(!is.na(out),return(out),return(NA))
}
cl <- lamb_clas2(points = points, mslp = mslp)
table(cl$clas$WT)
lamb_clas <- function(points,mslp, U = FALSE){
var <- vars_lamb(points,mslp,U)
WT <- apply(var,1,lamb_wt)
# clas
time <- unique(mslp$time)
clas <- tibble(time,WT)
# grid clas
grid_clas <- inner_join(clas, mslp, by = "time") %>%
group_by(.data$lon,.data$lat,.data$WT) %>%
summarise(.data$value) %>% ungroup() %>%
distinct(.data$lon,.data$lat,.data$WT,.keep_all = T)
return(list(clas = clas,
grid_clas = grid_clas))
}
vars_lamb <- function(points, mslp, U = F) {
pp <- inner_join(points, mslp, by = c("lon","lat")) %>%
select(c(.data$label,.data$time,.data$value)) %>%
pivot_wider(names_from = .data$label,values_from = .data$value)
x<- pp
if(U == F){ #Trigo & DaCamara, 2000
SF <- 1.305*(0.25*(x$P5+2*x$P9+x$P13)-0.25*(x$P4+2*x$P8+x$P12))
WF <- (0.5*(x$P12+x$P13)-0.5*(x$P4+x$P5))
D <- atan(WF/SF)*(360/(2*pi))
ZS <- 0.85*(0.25*(x$P6+2*x$P10+x$P14)-0.25*(x$P5+2*x$P9+x$P3)-0.25*(x$P4+2*x$P8+x$P12)+0.25*(x$P3+2*x$P7+x$P11))
ZW <- 1.12*(0.5*(x$P15+x$P16)-0.5*(x$P8+x$P9)-0.91*(0.5*(x$P8+x$P9)-0.5*(x$P1+x$P2)))
FF <- (SF^2+WF^2)^(1/2)
Z <- ZS+ZW
} else { # Jones et al., 1993
SF <- 1.74*(0.25*(x$P5+2*x$P9+x$P13)-0.25*(x$P4+2*x$P8+x$P12))
WF <- (0.5*(x$P12+x$P13)-0.5*(x$P4+x$P5))
D <- atan(WF/SF)*(360/(2*pi))
ZS <- 1.52*(0.25*(x$P6+2*x$P10+x$P14)-0.25*(x$P5+2*x$P9+x$P3)-0.25*(x$P4+2*x$P8+x$P12)+0.25*(x$P3+2*x$P7+x$P11))
ZW <- 1.07*(0.5*(x$P15+x$P16)-0.5*(x$P8+x$P9)-0.95*(0.5*(x$P8+x$P9)-0.5*(x$P1+x$P2)))
FF <- (SF^2+WF^2)^(1/2)
Z <- ZS+ZW
}
var <- data.frame(SF,WF,D,ZS,ZW,FF,Z)
}
lamb_wt <- function(x,U = F){
dir <- seq(22.5,360,45)
lev_dir <- levels(cut(seq(0,360,1),seq(22.5,360,45)))
if(abs(x["Z"])<x["FF"]){
out <- ifelse(x["WF"]>0 & x["SF"]>0, x["D"]+180,ifelse(x["WF"]>0 & x["SF"]<0,x["D"]+360,ifelse(x["WF"]<0 & x["SF"]<0,x["D"],x["D"]+180)))
out <- recode(as.character(cut(out,dir)),"(22.5,67.5]"="NE","(67.5,112]"="E","(112,158]"="SE",
"(158,202]"="S","(202,248]"="SW","(248,292]"="W","(292,338]"="NW",.missing = "N")
}
if(abs(x["Z"])>2*x["FF"]){
if(x["Z"]>0){
out <- "C"
}else{
out <- "A"
}
}
if(x["FF"]<abs(x["Z"])&abs(x["Z"])<2*x["FF"]){
if(x["Z"]>0){
out_p1 <- "C"
}else{
out_p1 <- "A"
}
out_p2 <- unlist(ifelse(x["WF"]>0 & x["SF"]>0, x["D"]+180,ifelse(x["WF"]>0 & x["SF"]<0,x["D"]+360,ifelse(x["WF"]<0 & x["SF"]<0,x["D"],x["D"]+180))))
out_p2 <- recode(as.character(cut(out_p2,dir)),"(22.5,67.5]"="NE","(67.5,112]"="E","(112,158]"="SE",
"(158,202]"="S","(202,248]"="SW","(248,292]"="W","(292,338]"="NW",.missing = "N")
out <- as.character(paste(out_p1,out_p2,sep=""))
}
# Only works when U = TRUE.
if(U!= FALSE & abs(x["Z"])<500 & x["FF"]<500) out <- "U"
ifelse(!is.na(out),return(out),return(NA))
}
cl <- lamb_clas(points = points, mslp = mslp,U = T)
table(cl$clas$WT)
lamb_wt <- function(x,U = F){
dir <- seq(22.5,360,45)
lev_dir <- levels(cut(seq(0,360,1),seq(22.5,360,45)))
if(abs(x["Z"])<x["FF"]){
out <- ifelse(x["WF"]>0 & x["SF"]>0, x["D"]+180,ifelse(x["WF"]>0 & x["SF"]<0,x["D"]+360,ifelse(x["WF"]<0 & x["SF"]<0,x["D"],x["D"]+180)))
out <- recode(as.character(cut(out,dir)),"(22.5,67.5]"="NE","(67.5,112]"="E","(112,158]"="SE",
"(158,202]"="S","(202,248]"="SW","(248,292]"="W","(292,338]"="NW",.missing = "N")
}
if(abs(x["Z"])>2*x["FF"]){
if(x["Z"]>0){
out <- "C"
}else{
out <- "A"
}
}
if(x["FF"]<abs(x["Z"])&abs(x["Z"])<2*x["FF"]){
if(x["Z"]>0){
out_p1 <- "C"
}else{
out_p1 <- "A"
}
out_p2 <- unlist(ifelse(x["WF"]>0 & x["SF"]>0, x["D"]+180,ifelse(x["WF"]>0 & x["SF"]<0,x["D"]+360,ifelse(x["WF"]<0 & x["SF"]<0,x["D"],x["D"]+180))))
out_p2 <- recode(as.character(cut(out_p2,dir)),"(22.5,67.5]"="NE","(67.5,112]"="E","(112,158]"="SE",
"(158,202]"="S","(202,248]"="SW","(248,292]"="W","(292,338]"="NW",.missing = "N")
out <- as.character(paste(out_p1,out_p2,sep=""))
}
# Only works when U = TRUE.
if(U!= FALSE & abs(x["Z"])<1000 & x["FF"]<5000) out <- "U"
ifelse(!is.na(out),return(out),return(NA))
}
cl <- lamb_clas(points = points, mslp = mslp,U = T)
table(cl$clas$WT)
pp <- inner_join(points, mslp, by = c("lon","lat")) %>%
select(c(.data$label,.data$time,.data$value)) %>%
pivot_wider(names_from = .data$label,values_from = .data$value)
pp
SF <- 1.74*(0.25*(x$P5+2*x$P9+x$P13)-0.25*(x$P4+2*x$P8+x$P12))
x<- pp
SF <- 1.74*(0.25*(x$P5+2*x$P9+x$P13)-0.25*(x$P4+2*x$P8+x$P12))
SF
WF <- (0.5*(x$P12+x$P13)-0.5*(x$P4+x$P5))
D <- atan(WF/SF)*(360/(2*pi))
ZS <- 0.85*(0.25*(x$P6+2*x$P10+x$P14)-0.25*(x$P5+2*x$P9+x$P3)-0.25*(x$P4+2*x$P8+x$P12)+0.25*(x$P3+2*x$P7+x$P11))
ZW <- 1.12*(0.5*(x$P15+x$P16)-0.5*(x$P8+x$P9)-0.91*(0.5*(x$P8+x$P9)-0.5*(x$P1+x$P2)))
FF <- (SF^2+WF^2)^(1/2)
Z <- ZS+ZW
Z
sum(abs(z)<6)
sum(abs(Z)<6)
FF
sum(abs(FF)<6)
WF
WF <- 0.5*(x$P12+x$P13)-0.5*(x$P4+x$P5)
WF
WF <- (0.5*(x$P12+x$P13))-(0.5*(x$P4+x$P5))
WF
pp
points
plot_lamb_scheme(points)
sum(abs(FF)<6)
min(FF)
FF <- (SF^2+WF^2)
FF
min(FF)
FF <- (SF^2+WF^2)^(1/2)
FF
inner_join(points, mslp, by = c("lon","lat")) %>%
select(c(.data$label,.data$time,.data$value))
names(pp)
download_ncep(lon_range = c(-10,30),month_range = c(6,7,8))
cl <-download_ncep(lon_range = c(-10,30),month_range = c(6,7,8))
lamb_clas(points,cl,U=T)
aa <-lamb_clas(points,cl,U=T)
table(aa$clas$WT)
mslp <- cl
pp <- inner_join(points, mslp, by = c("lon","lat")) %>%
select(c(.data$label,.data$time,.data$value)) %>%
pivot_wider(names_from = .data$label,values_from = .data$value)
x<- pp
SF <- 1.305*(0.25*(x$P5+2*x$P9+x$P13)-0.25*(x$P4+2*x$P8+x$P12))
SF
SF <- 1.74*(0.25*(x$P5+2*x$P9+x$P13)-0.25*(x$P4+2*x$P8+x$P12))
WF <- 0.5*(x$P12+x$P13)-0.5*(x$P4+x$P5)
D <- atan(WF/SF)*(360/(2*pi))
ZS <- 1.52*(0.25*(x$P6+2*x$P10+x$P14)-0.25*(x$P5+2*x$P9+x$P3)-0.25*(x$P4+2*x$P8+x$P12)+0.25*(x$P3+2*x$P7+x$P11))
ZW <- 1.07*(0.5*(x$P15+x$P16)-0.5*(x$P8+x$P9)-0.95*(0.5*(x$P8+x$P9)-0.5*(x$P1+x$P2)))
FF <- (SF^2+WF^2)^(1/2)
FF
min(FF)
SF
SF <- 1.74*(0.25*(x$P5+(2*x$P9)+x$P13)-0.25*(x$P4+(2*x$P8)+x$P12))
SF
SF <- 1.74*(0.25*(x$P5+(2*x$P9)+x$P13)-0.25*(x$P4+(2*x$P8)+x$P12))
SF
FF <- ((SF^2)+(WF^2))^(1/2)
FF
min(FF)
FF <- (SF+WF)^(1/2)
FF
FF <- (SF^2+WF^2)
FF
min(FF)
SF <- 1.305*(0.25*(x$P5+2*x$P9+x$P13)-0.25*(x$P4+2*x$P8+x$P12))
WF <- (0.5*(x$P12+x$P13)-0.5*(x$P4+x$P5))
D <- atan(WF/SF)*(360/(2*pi))
ZS <- 0.85*(0.25*(x$P6+2*x$P10+x$P14)-0.25*(x$P5+2*x$P9+x$P3)-0.25*(x$P4+2*x$P8+x$P12)+0.25*(x$P3+2*x$P7+x$P11))
ZW <- 1.12*(0.5*(x$P15+x$P16)-0.5*(x$P8+x$P9)-0.91*(0.5*(x$P8+x$P9)-0.5*(x$P1+x$P2)))
FF <- (SF^2+WF^2)^(1/2)
min(FF)
min(Z)
min(abs(Z))
Z <- ZS+ZW
min(abs(Z))
mslp
mslp$value<-mslp$value/100
mslp
pp <- inner_join(points, mslp, by = c("lon","lat")) %>%
select(c(.data$label,.data$time,.data$value)) %>%
pivot_wider(names_from = .data$label,values_from = .data$value)
x<- pp
SF <- 1.74*(0.25*(x$P5+2*x$P9+x$P13)-0.25*(x$P4+2*x$P8+x$P12))
SF
WF <- 0.5*(x$P12+x$P13)-0.5*(x$P4+x$P5)
D <- atan(WF/SF)*(360/(2*pi))
ZS <- 1.52*(0.25*(x$P6+2*x$P10+x$P14)-0.25*(x$P5+2*x$P9+x$P3)-0.25*(x$P4+2*x$P8+x$P12)+0.25*(x$P3+2*x$P7+x$P11))
ZW <- 1.07*(0.5*(x$P15+x$P16)-0.5*(x$P8+x$P9)-0.95*(0.5*(x$P8+x$P9)-0.5*(x$P1+x$P2)))
FF <- (SF^2+WF^2)^(1/2)
Z <- ZS+ZW
FF
Z <- ZS+ZW
Z
