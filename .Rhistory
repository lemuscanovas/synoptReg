## Absolute WT procedure
max_rotatedLoadings <- rotatedLoadings %>%
as_tibble() %>%
setNames(paste0("PC", 1:ncomp))
## Absolute WT procedure
rotatedLoadings <- rotatedLoadings %>%
as_tibble() %>%
setNames(paste0("PC", 1:ncomp))
max_rotatedLoadings$WT_abs <- names(rotatedLoadings)[max.col(rotatedLoadings,
ties.method = "first")]
max_rotatedLoadings
rotatedLoadings$WT_abs <- names(rotatedLoadings)[max.col(rotatedLoadings,
ties.method = "first")]
rotatedLoadings
rm(rotatedLoadings)
rm(max_rotatedLoadings)
rawLoadings <- pca$loadings[, 1:ncomp] %*% diag(pca$sdev, ncomp, ncomp)
rotatedLoadings <- varimax(rawLoadings)$loadings[]
scores <- scale(pca$scores[, 1:ncomp]) %*% varimax(rawLoadings)$rotmat %>%
as_tibble() %>%
setNames(paste0("PC", 1:ncomp))
## Absolute WT procedure
rotatedLoadings <- rotatedLoadings %>%
as_tibble() %>%
setNames(paste0("PC", 1:ncomp))
max_rotatedLoadings$WT_abs <- names(rotatedLoadings)[max.col(rotatedLoadings,
ties.method = "first")]
## Max Positive Loading WT procedure
max_rotatedLoadings <- rotatedLoadings %>%
as_tibble() %>%
setNames(paste0("PC", 1:ncomp))
max_rotatedLoadings$WT_abs <- names(max_rotatedLoadings)[max.col(max_rotatedLoadings,
ties.method = "first")]
WT_abs <- suppressWarnings(as.numeric(gsub(substr(abs_rotatedLoadings$WT_abs, 1, 2), "",
abs_rotatedLoadings$WT_abs)))  # convertimos a numerico
## Max Positive Loading WT procedure
max_rotatedLoadings <- rotatedLoadings %>%
as_tibble() %>%
setNames(paste0("PC", 1:ncomp))
max_rotatedLoadings$WT_max <- names(max_rotatedLoadings)[max.col(max_rotatedLoadings,
ties.method = "first")]
max_rotatedLoadings
suppressWarnings(as.numeric(gsub(substr(max_rotatedLoadings$WT_max, 1, 2), "",
max_rotatedLoadings$WT_max)))
WT_max <- suppressWarnings(as.numeric(gsub(substr(max_rotatedLoadings$WT_max, 1, 2), "",
max_rotatedLoadings$WT_max)))  # convertimos a numerico
max_rotatedLoadings$WT_max
max_rotatedLoadings$WT_max <- WT_max
max_rotatedLoadings
rotatedLoadings %>%
as_tibble() %>%
setNames(1:ncomp) %>%
cbind.data.frame(time = unique(x$time),
WT_abs = abs_rotatedLoadings$WT_abs) %>%
as_tibble()
## Negative/postive WT procedure
WT_posneg <- rotatedLoadings %>%
as_tibble() %>%
setNames(1:ncomp) %>%
cbind.data.frame(time = unique(x$time),
WT_max = abs_rotatedLoadings$WT_max) %>%
as_tibble()
## Negative/postive WT procedure
WT_posneg <- rotatedLoadings %>%
as_tibble() %>%
setNames(1:ncomp) %>%
cbind.data.frame(time = unique(x$time),
WT_max =max_rotatedLoadings$WT_max) %>%
as_tibble()
WT_posneg
gather(WT_posneg,
key = "PCs",
value = "loadings",
1:ncomp)
gather(WT_posneg,
key = "PCs",
value = "loadings",
1:ncomp) %>%
mutate(PCs = as.numeric(.data$PCs))
gather(WT_posneg,
key = "PCs",
value = "loadings",
1:ncomp) %>%
mutate(PCs = as.numeric(.data$PCs)) %>%
mutate(loadings = ifelse(.data$WT_max == .data$PCs, loadings, NA))
gather(WT_posneg,
key = "PCs",
value = "loadings",
1:ncomp) %>%
mutate(PCs = as.numeric(.data$PCs)) %>%
mutate(loadings = ifelse(.data$WT_max == .data$PCs, loadings, NA)) %>%
filter(!is.na(.data$loadings))
gather(WT_posneg,
key = "PCs",
value = "loadings",
1:ncomp) %>%
mutate(PCs = as.numeric(.data$PCs)) %>%
mutate(loadings = ifelse(.data$WT_max == .data$PCs, loadings, NA)) %>%
filter(!is.na(.data$loadings)) %>%
arrange(.data$time)
abs_rotatedLoadings <- abs(rotatedLoadings) %>%
as_tibble() %>%
setNames(paste0("PC", 1:ncomp))
abs_rotatedLoadings$WT_abs <- names(abs_rotatedLoadings)[max.col(abs_rotatedLoadings,
ties.method = "first")]
WT_abs <- suppressWarnings(as.numeric(gsub(substr(abs_rotatedLoadings$WT_abs, 1, 2), "",
abs_rotatedLoadings$WT_abs)))  # convertimos a numerico
abs_rotatedLoadings$WT_abs <- WT_abs
WT_posneg <- rotatedLoadings %>%
as_tibble() %>%
setNames(1:ncomp) %>%
cbind.data.frame(time = unique(x$time),
WT_abs =abs_rotatedLoadings$WT_abs) %>%
as_tibble()
WT_posneg
WT_posneg <- rotatedLoadings %>%
as_tibble() %>%
setNames(1:ncomp) %>%
cbind.data.frame(time = unique(x$time),
WT_abs =abs_rotatedLoadings$WT_abs) %>%
as_tibble()
WT_posneg
gather(WT_posneg,
key = "PCs",
value = "loadings",
1:ncomp) %>%
mutate(PCs = as.numeric(.data$PCs))
gather(WT_posneg,
key = "PCs",
value = "loadings",
1:ncomp) %>%
mutate(PCs = as.numeric(.data$PCs))
gather(WT_posneg,
key = "PCs",
value = "loadings",
1:ncomp) %>%
mutate(PCs = as.numeric(.data$PCs)) %>%
mutate(loadings = ifelse(.data$WT_abs == .data$PCs, loadings, NA))
gather(WT_posneg,
key = "PCs",
value = "loadings",
1:ncomp) %>%
mutate(PCs = as.numeric(.data$PCs)) %>%
mutate(loadings = ifelse(.data$WT_abs == .data$PCs, loadings, NA)) %>%
filter(!is.na(.data$loadings)) %>%
arrange(.data$time)
gather(WT_posneg,
key = "PCs",
value = "loadings",
1:ncomp) %>%
mutate(PCs = as.numeric(.data$PCs)) %>%
mutate(loadings = ifelse(.data$WT_abs == .data$PCs, loadings, NA)) %>%
filter(!is.na(.data$loadings)) %>%
arrange(.data$time) %>%
mutate(symbol = ifelse(loadings >= 0, "+", "-"),
WT_pn = paste0(.data$PCs, .data$symbol))
synoptclas2 <- function(x, ncomp, norm = T, matrix_mode = "S-mode", extreme_scores = 2) {
if (matrix_mode == "S-mode") {
if (norm == T) {
pca <- x %>%
select(-.data$anom_value) %>%
group_by(.data$var, .data$lon, .data$lat) %>%
mutate(value = scale(.data$value)) %>%
ungroup() %>%
unite("expanded_grid",
.data$lon:.data$lat, sep = ",", remove = T) %>%
unite("expanded_grid", .data$expanded_grid, .data$var, sep = "_",
remove = T) %>%
spread(.data$expanded_grid, .data$value) %>%
select(-1) %>%
princomp(scores = T)
} else if (norm == F) {
pca <- x %>%
select(-.data$anom_value) %>%
unite("expanded_grid", .data$lon, .data$lat, sep = ",", remove = T) %>%
unite("expanded_grid", .data$expanded_grid, .data$var, sep = "_",
remove = T) %>%
spread(.data$expanded_grid, .data$value) %>%
select(-1) %>%
princomp(scores = T)
}
rawLoadings <- pca$loadings[, 1:ncomp] %*% diag(pca$sdev, ncomp, ncomp)
rotatedLoadings <- varimax(rawLoadings)$loadings
scores <- scale(pca$scores[, 1:ncomp]) %*%
varimax(rawLoadings)$rotmat %>%
as_tibble() %>%
setNames(paste0("PC", 1:ncomp))
# Extreme scores calculation (Esteban et al., 2005)
list_extreme_scores <- list()
for (ii in 1:ncomp) {
tt <- seq(1:ncomp)
# Removeing extreme positive scores for all B4PCs except PC1, and so on
subdata <- scores[apply(scores[, c(tt[-ii])] < extreme_scores,
1, all), ]
# Removeing extreme negative scores for all B4PCs except PC1, and so on
subdata2 <- subdata[apply(subdata[, c(tt[-ii])] > -extreme_scores,
1, all), ]
# Ara promitgem dies extrems positius del PC1 A l'eliminar extrems
# dels altres PCs, reflexem perfectament les coordenades
# del PC1 +
subdata_pos <- colMeans(subdata2[apply(subdata2[ii] > extreme_scores,
1, all), ])
subdata_neg <- colMeans(subdata2[apply(subdata2[ii] < -extreme_scores,
1, all), ])
result <- rbind(subdata_pos, subdata_neg)
rownames(result) <- c(paste0("pc", ii, "+"), paste0("pc", ii, "-"))
list_extreme_scores[[ii]] <- result
}
# Scores coordinates
coordinates_scores <- do.call(rbind.data.frame, list_extreme_scores)
coordinates_scores <- na.omit(coordinates_scores)
# kmeans classification
clas <- suppressWarnings(kmeans(scores,
centers = coordinates_scores,
iter.max = 1))$cluster %>%
cbind.data.frame(time = unique(x$time)) %>%
rename(WT = 1) %>%
select(.data$time, .data$WT) %>%
as_tibble()
df_classified <- x %>%
inner_join(clas, by = "time")
df_classified_panels <- df_classified %>%
group_by(.data$lon, .data$lat, .data$WT, .data$var) %>%
mutate(mean_WT_value = mean(.data$value),
mean_WT_anom_value = mean(.data$anom_value),
cv_WT_value = (sd(.data$value) / mean(.data$value)) * 100) %>%
select(-.data$value, -.data$anom_value) %>%
ungroup() %>%
distinct(.data$lon, .data$lat, .data$WT, .data$var, .keep_all = T)
return(list(clas = clas, grid_clas = df_classified_panels))
} else if (matrix_mode == "T-mode") {
if (norm == T) {
pca <- x %>%
select(-.data$anom_value) %>%
group_by(.data$var, .data$lon, .data$lat) %>%
mutate(value = scale(.data$value)) %>%
ungroup() %>%
spread(.data$time,.data$value) %>%
select(-1:-3) %>%
princomp(scores = T)
} else if (norm == F) {
pca <- x %>%
select(-.data$anom_value) %>%
spread(.data$time, .data$value) %>%
select(-1:-3) %>%
princomp(scores = T)
}
rawLoadings <- pca$loadings[, 1:ncomp] %*% diag(pca$sdev, ncomp, ncomp)
rotatedLoadings <- varimax(rawLoadings)$loadings[]
scores <- scale(pca$scores[, 1:ncomp]) %*% varimax(rawLoadings)$rotmat %>%
as_tibble() %>%
setNames(paste0("PC", 1:ncomp))
## Max Positive Loading WT procedure
max_rotatedLoadings <- rotatedLoadings %>%
as_tibble() %>%
setNames(paste0("PC", 1:ncomp))
max_rotatedLoadings$WT_max <- names(max_rotatedLoadings)[max.col(max_rotatedLoadings,
ties.method = "first")]
WT_max <- suppressWarnings(as.numeric(gsub(substr(max_rotatedLoadings$WT_max, 1, 2), "",
max_rotatedLoadings$WT_max)))  # convertimos a numerico
max_rotatedLoadings$WT_max <- WT_max
## Negative/postive WT procedure
abs_rotatedLoadings <- abs(rotatedLoadings) %>%
as_tibble() %>%
setNames(paste0("PC", 1:ncomp))
abs_rotatedLoadings$WT_abs <- names(abs_rotatedLoadings)[max.col(abs_rotatedLoadings,
ties.method = "first")]
WT_abs <- suppressWarnings(as.numeric(gsub(substr(abs_rotatedLoadings$WT_abs, 1, 2), "",
abs_rotatedLoadings$WT_abs)))  # convertimos a numerico
abs_rotatedLoadings$WT_abs <- WT_abs
WT_posneg <- rotatedLoadings %>%
as_tibble() %>%
setNames(1:ncomp) %>%
cbind.data.frame(time = unique(x$time),
WT_abs =abs_rotatedLoadings$WT_abs) %>%
as_tibble()
# creant serie unica maxims loadings (+ o -)
WT_posneg_g <- gather(WT_posneg,
key = "PCs",
value = "loadings",
1:ncomp) %>%
mutate(PCs = as.numeric(.data$PCs)) %>%
mutate(loadings = ifelse(.data$WT_abs == .data$PCs, loadings, NA)) %>%
filter(!is.na(.data$loadings)) %>%
arrange(.data$time) %>%
mutate(symbol = ifelse(loadings >= 0, "+", "-"),
WT_pn = paste0(.data$PCs, .data$symbol))
## Final classifications
clas_max <- select(WT_posneg_g, .data$time, .data$WT_max) %>% rename(WT = .data$WT_max)
clas_pn <- select(WT_posneg_g, .data$time, .data$WT_pn) %>% rename(WT = .data$WT_pn)
# absolute classification gridding construction
df_tmode_abs <- x %>%
inner_join(clas_abs, by = "time")
df_tmode_abs_panels <- df_tmode_abs %>%
group_by(.data$lon, .data$lat, .data$WT, .data$var) %>%
mutate(mean_WT_value = mean(.data$value),
mean_WT_anom_value = mean(.data$anom_value),
cv_WT_value = (sd(.data$value) / mean(.data$value)) * 100) %>%
select(-.data$value, -.data$anom_value) %>%
ungroup() %>%
distinct(.data$lon, .data$lat, .data$WT, .data$var, .keep_all = T)
# Positive/negative classification gridding construction
df_tmode_pn <- x %>%
inner_join(clas_pn, by = "time")
df_tmode_pn_panels <- df_tmode_pn %>%
group_by(.data$lon, .data$lat, .data$WT, .data$var) %>%
mutate(mean_WT_value = mean(.data$value),
mean_WT_anom_value = mean(.data$anom_value),
cv_WT_value = (sd(.data$value) / mean(.data$value)) * 100) %>%
select(-.data$value, -.data$anom_value) %>%
ungroup() %>%
distinct(.data$lon, .data$lat, .data$WT, .data$var, .keep_all = T)
return(list(clas_abs = clas_abs,
clas_pn = clas_pn,
grid_clas_abs = df_tmode_abs_panels,
grid_clas_pn = df_tmode_pn_panels))
} else {
stop("please, choose one between S-mode and T-mode matrix modes")
}
}
synoptclas2(vars_torrential,4,matrix_mode = "T-mode")
## Final classifications
clas_max <- select(WT_posneg_g, .data$time, .data$WT_max) %>% rename(WT = .data$WT_max)
# creant serie unica maxims loadings (+ o -)
WT_posneg_g <- gather(WT_posneg,
key = "PCs",
value = "loadings",
1:ncomp) %>%
mutate(PCs = as.numeric(.data$PCs)) %>%
mutate(loadings = ifelse(.data$WT_abs == .data$PCs, loadings, NA)) %>%
filter(!is.na(.data$loadings)) %>%
arrange(.data$time) %>%
mutate(symbol = ifelse(loadings >= 0, "+", "-"),
WT_pn = paste0(.data$PCs, .data$symbol))
## Final classifications
clas_max <- select(WT_posneg_g, .data$time, .data$WT_max) %>% rename(WT = .data$WT_max)
WT_posneg_g
WT_max
max_rotatedLoadings
max_rotatedLoadings
WT_posneg
synoptclas2 <- function(x, ncomp, norm = T, matrix_mode = "S-mode", extreme_scores = 2) {
if (matrix_mode == "S-mode") {
if (norm == T) {
pca <- x %>%
select(-.data$anom_value) %>%
group_by(.data$var, .data$lon, .data$lat) %>%
mutate(value = scale(.data$value)) %>%
ungroup() %>%
unite("expanded_grid",
.data$lon:.data$lat, sep = ",", remove = T) %>%
unite("expanded_grid", .data$expanded_grid, .data$var, sep = "_",
remove = T) %>%
spread(.data$expanded_grid, .data$value) %>%
select(-1) %>%
princomp(scores = T)
} else if (norm == F) {
pca <- x %>%
select(-.data$anom_value) %>%
unite("expanded_grid", .data$lon, .data$lat, sep = ",", remove = T) %>%
unite("expanded_grid", .data$expanded_grid, .data$var, sep = "_",
remove = T) %>%
spread(.data$expanded_grid, .data$value) %>%
select(-1) %>%
princomp(scores = T)
}
rawLoadings <- pca$loadings[, 1:ncomp] %*% diag(pca$sdev, ncomp, ncomp)
rotatedLoadings <- varimax(rawLoadings)$loadings
scores <- scale(pca$scores[, 1:ncomp]) %*%
varimax(rawLoadings)$rotmat %>%
as_tibble() %>%
setNames(paste0("PC", 1:ncomp))
# Extreme scores calculation (Esteban et al., 2005)
list_extreme_scores <- list()
for (ii in 1:ncomp) {
tt <- seq(1:ncomp)
# Removeing extreme positive scores for all B4PCs except PC1, and so on
subdata <- scores[apply(scores[, c(tt[-ii])] < extreme_scores,
1, all), ]
# Removeing extreme negative scores for all B4PCs except PC1, and so on
subdata2 <- subdata[apply(subdata[, c(tt[-ii])] > -extreme_scores,
1, all), ]
# Ara promitgem dies extrems positius del PC1 A l'eliminar extrems
# dels altres PCs, reflexem perfectament les coordenades
# del PC1 +
subdata_pos <- colMeans(subdata2[apply(subdata2[ii] > extreme_scores,
1, all), ])
subdata_neg <- colMeans(subdata2[apply(subdata2[ii] < -extreme_scores,
1, all), ])
result <- rbind(subdata_pos, subdata_neg)
rownames(result) <- c(paste0("pc", ii, "+"), paste0("pc", ii, "-"))
list_extreme_scores[[ii]] <- result
}
# Scores coordinates
coordinates_scores <- do.call(rbind.data.frame, list_extreme_scores)
coordinates_scores <- na.omit(coordinates_scores)
# kmeans classification
clas <- suppressWarnings(kmeans(scores,
centers = coordinates_scores,
iter.max = 1))$cluster %>%
cbind.data.frame(time = unique(x$time)) %>%
rename(WT = 1) %>%
select(.data$time, .data$WT) %>%
as_tibble()
df_classified <- x %>%
inner_join(clas, by = "time")
df_classified_panels <- df_classified %>%
group_by(.data$lon, .data$lat, .data$WT, .data$var) %>%
mutate(mean_WT_value = mean(.data$value),
mean_WT_anom_value = mean(.data$anom_value),
cv_WT_value = (sd(.data$value) / mean(.data$value)) * 100) %>%
select(-.data$value, -.data$anom_value) %>%
ungroup() %>%
distinct(.data$lon, .data$lat, .data$WT, .data$var, .keep_all = T)
return(list(clas = clas, grid_clas = df_classified_panels))
} else if (matrix_mode == "T-mode") {
if (norm == T) {
pca <- x %>%
select(-.data$anom_value) %>%
group_by(.data$var, .data$lon, .data$lat) %>%
mutate(value = scale(.data$value)) %>%
ungroup() %>%
spread(.data$time,.data$value) %>%
select(-1:-3) %>%
princomp(scores = T)
} else if (norm == F) {
pca <- x %>%
select(-.data$anom_value) %>%
spread(.data$time, .data$value) %>%
select(-1:-3) %>%
princomp(scores = T)
}
rawLoadings <- pca$loadings[, 1:ncomp] %*% diag(pca$sdev, ncomp, ncomp)
rotatedLoadings <- varimax(rawLoadings)$loadings[]
scores <- scale(pca$scores[, 1:ncomp]) %*% varimax(rawLoadings)$rotmat %>%
as_tibble() %>%
setNames(paste0("PC", 1:ncomp))
## Max Positive Loading WT procedure
max_rotatedLoadings <- rotatedLoadings %>%
as_tibble() %>%
setNames(paste0("PC", 1:ncomp))
max_rotatedLoadings$WT_max <- names(max_rotatedLoadings)[max.col(max_rotatedLoadings,
ties.method = "first")]
WT_max <- suppressWarnings(as.numeric(gsub(substr(max_rotatedLoadings$WT_max, 1, 2), "",
max_rotatedLoadings$WT_max)))  # convertimos a numerico
max_rotatedLoadings$WT_max <- WT_max
## Negative/postive WT procedure
abs_rotatedLoadings <- abs(rotatedLoadings) %>%
as_tibble() %>%
setNames(paste0("PC", 1:ncomp))
abs_rotatedLoadings$WT_abs <- names(abs_rotatedLoadings)[max.col(abs_rotatedLoadings,
ties.method = "first")]
WT_abs <- suppressWarnings(as.numeric(gsub(substr(abs_rotatedLoadings$WT_abs, 1, 2), "",
abs_rotatedLoadings$WT_abs)))  # convertimos a numerico
abs_rotatedLoadings$WT_abs <- WT_abs
WT_posneg <- rotatedLoadings %>%
as_tibble() %>%
setNames(1:ncomp) %>%
cbind.data.frame(time = unique(x$time),
WT_abs =abs_rotatedLoadings$WT_abs,
WT_max = max_rotatedLoadings$WT_max) %>%
as_tibble()
# creant serie unica maxims loadings (+ o -)
WT_posneg_g <- gather(WT_posneg,
key = "PCs",
value = "loadings",
1:ncomp) %>%
mutate(PCs = as.numeric(.data$PCs)) %>%
mutate(loadings = ifelse(.data$WT_abs == .data$PCs, loadings, NA)) %>%
filter(!is.na(.data$loadings)) %>%
arrange(.data$time) %>%
mutate(symbol = ifelse(loadings >= 0, "+", "-"),
WT_pn = paste0(.data$PCs, .data$symbol))
## Final classifications
clas_abs <- select(WT_posneg_g, .data$time, .data$WT_abs) %>% rename(WT = .data$WT_abs)
clas_pn <- select(WT_posneg_g, .data$time, .data$WT_pn) %>% rename(WT = .data$WT_pn)
clas_max <- select(WT_posneg_g, .data$time, .data$WT_max) %>% rename(WT = .data$WT_max)
# absolute classification gridding construction
df_tmode_abs <- x %>%
inner_join(clas_abs, by = "time")
df_tmode_abs_panels <- df_tmode_abs %>%
group_by(.data$lon, .data$lat, .data$WT, .data$var) %>%
mutate(mean_WT_value = mean(.data$value),
mean_WT_anom_value = mean(.data$anom_value),
cv_WT_value = (sd(.data$value) / mean(.data$value)) * 100) %>%
select(-.data$value, -.data$anom_value) %>%
ungroup() %>%
distinct(.data$lon, .data$lat, .data$WT, .data$var, .keep_all = T)
# Positive/negative classification gridding construction
df_tmode_pn <- x %>%
inner_join(clas_pn, by = "time")
df_tmode_pn_panels <- df_tmode_pn %>%
group_by(.data$lon, .data$lat, .data$WT, .data$var) %>%
mutate(mean_WT_value = mean(.data$value),
mean_WT_anom_value = mean(.data$anom_value),
cv_WT_value = (sd(.data$value) / mean(.data$value)) * 100) %>%
select(-.data$value, -.data$anom_value) %>%
ungroup() %>%
distinct(.data$lon, .data$lat, .data$WT, .data$var, .keep_all = T)
return(list(clas_abs = clas_abs,
clas_pn = clas_pn,
grid_clas_abs = df_tmode_abs_panels,
grid_clas_pn = df_tmode_pn_panels))
} else {
stop("please, choose one between S-mode and T-mode matrix modes")
}
}
synoptclas2(vars_torrential,4,matrix_mode = "T-mode")
devtools::check()
roxygen2::roxygenise()
setwd("C:/Users/gc/Desktop/synoptReg")
roxygen2::roxygenise()
